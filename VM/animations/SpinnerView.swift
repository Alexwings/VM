//
// SpinnerView.swift
// Generated by Core Animator version 1.3.2 on 1/21/17.
//
// DO NOT MODIFY THIS FILE. IT IS AUTO-GENERATED AND WILL BE OVERWRITTEN
//

import UIKit

private class SpinnerPassthroughView: UIView {
    override func point(inside point: CGPoint, with event: UIEvent?) -> Bool {
        for subview in subviews as [UIView] {
            if subview.point(inside: convert(point, to: subview), with: event) { return true }
        }
        return false
    }
}

@IBDesignable
class SpinnerView : UIView, CAAnimationDelegate {


	var animationCompletions = Dictionary<CAAnimation, (Bool) -> Void>()
	var viewsByName: [String : UIView]!

	// - MARK: Life Cycle

	convenience init() {
		self.init(frame: CGRect(x: 0, y: 0, width: 1136, height: 768))
	}

	override init(frame: CGRect) {
		super.init(frame: frame)
		self.setupHierarchy()
	}

	required init?(coder aDecoder: NSCoder) {
		super.init(coder: aDecoder)
		self.setupHierarchy()
	}

	// - MARK: Scaling

	override func layoutSubviews() {
		super.layoutSubviews()

		if let scalingView = self.viewsByName["__scaling__"] {
			var xScale = self.bounds.size.width / scalingView.bounds.size.width
			var yScale = self.bounds.size.height / scalingView.bounds.size.height
			switch contentMode {
			case .scaleToFill:
				break
			case .scaleAspectFill:
				let scale = max(xScale, yScale)
				xScale = scale
				yScale = scale
			default:
				let scale = min(xScale, yScale)
				xScale = scale
				yScale = scale
			}
			scalingView.transform = CGAffineTransform(scaleX: xScale, y: yScale)
			scalingView.center = CGPoint(x:self.bounds.midX, y:self.bounds.midY)
		}
	}

	// - MARK: Setup

	func setupHierarchy() {
		var viewsByName: [String : UIView] = [:]
		let bundle = Bundle(for:type(of: self))
		let __scaling__ = UIView()
		__scaling__.bounds = CGRect(x:0, y:0, width:1136, height:768)
		__scaling__.center = CGPoint(x:568.0, y:384.0)
		self.addSubview(__scaling__)
		viewsByName["__scaling__"] = __scaling__

		let disc__root = SpinnerPassthroughView()
		let disc__xScale = SpinnerPassthroughView()
		let disc__yScale = SpinnerPassthroughView()
		let disc = UIImageView()
		let imgDisc = UIImage(named:"disc.png", in: bundle, compatibleWith: nil)
		if imgDisc == nil {
			print("** Warning: Could not create image from 'disc.png'")
		}
		disc.image = imgDisc
		disc.contentMode = .center
		disc.layer.anchorPoint = CGPoint(x:0.504, y:0.505)
		disc.bounds = CGRect(x:0, y:0, width:104.0, height:104.0)
		disc__root.layer.position = CGPoint(x:466.340, y:384.492)
		disc__xScale.transform = CGAffineTransform(scaleX: 1.00, y: 1.00)
		disc__yScale.transform = CGAffineTransform(scaleX: 1.00, y: 1.00)
		disc__root.transform = CGAffineTransform(rotationAngle: 0.000)
		__scaling__.addSubview(disc__root)
		disc__root.addSubview(disc__xScale)
		disc__xScale.addSubview(disc__yScale)
		disc__yScale.addSubview(disc)
		__scaling__.addSubview(disc__root)
		viewsByName["disc__root"] = disc__root
		viewsByName["disc__xScale"] = disc__xScale
		viewsByName["disc__yScale"] = disc__yScale
		viewsByName["disc"] = disc

		self.viewsByName = viewsByName
	}

	// - MARK: fade

	func addFadeAnimation() {
		addFadeAnimation(beginTime: 0, fillMode: kCAFillModeBoth, removedOnCompletion: false, completion: nil)
	}

	func addFadeAnimation(completion: ((Bool) -> Void)?) {
		addFadeAnimation(beginTime: 0, fillMode: kCAFillModeBoth, removedOnCompletion: false, completion: completion)
	}

	func addFadeAnimation(removedOnCompletion: Bool) {
		addFadeAnimation(beginTime: 0, fillMode: removedOnCompletion ? kCAFillModeRemoved : kCAFillModeBoth, removedOnCompletion: removedOnCompletion, completion: nil)
	}

	func addFadeAnimation(removedOnCompletion: Bool, completion: ((Bool) -> Void)?) {
		addFadeAnimation(beginTime: 0, fillMode: removedOnCompletion ? kCAFillModeRemoved : kCAFillModeBoth, removedOnCompletion: removedOnCompletion, completion: completion)
	}

	func addFadeAnimation(beginTime: CFTimeInterval, fillMode: String, removedOnCompletion: Bool, completion: ((Bool) -> Void)?) {
		let linearTiming = CAMediaTimingFunction(name: kCAMediaTimingFunctionLinear)
		if let complete = completion {
			let representativeAnimation = CABasicAnimation(keyPath: "not.a.real.key")
			representativeAnimation.duration = 0.500
			representativeAnimation.delegate = self
			self.layer.add(representativeAnimation, forKey: "Fade")
			self.animationCompletions[layer.animation(forKey: "Fade")!] = complete
		}

		let discOpacityAnimation = CAKeyframeAnimation(keyPath: "opacity")
		discOpacityAnimation.duration = 0.500
		discOpacityAnimation.values = [1.000, 0.000] as [Float]
		discOpacityAnimation.keyTimes = [0.000, 1.000] as [NSNumber]
		discOpacityAnimation.timingFunctions = [linearTiming]
		discOpacityAnimation.beginTime = beginTime
		discOpacityAnimation.fillMode = fillMode
		discOpacityAnimation.isRemovedOnCompletion = removedOnCompletion
		self.viewsByName["disc__root"]?.layer.add(discOpacityAnimation, forKey:"fade_Opacity")
	}

	func removeFadeAnimation() {
		self.layer.removeAnimation(forKey: "Fade")
		self.viewsByName["disc__root"]?.layer.removeAnimation(forKey: "fade_Opacity")
	}

	// - MARK: spin

	func addSpinAnimation() {
		addSpinAnimation(beginTime: 0, fillMode: kCAFillModeBoth, removedOnCompletion: false)
	}

	func addSpinAnimation(removedOnCompletion: Bool) {
		addSpinAnimation(beginTime: 0, fillMode: removedOnCompletion ? kCAFillModeRemoved : kCAFillModeBoth, removedOnCompletion: removedOnCompletion)
	}

	func addSpinAnimation(beginTime: CFTimeInterval, fillMode: String, removedOnCompletion: Bool) {
		let linearTiming = CAMediaTimingFunction(name: kCAMediaTimingFunctionLinear)

		let discRotationAnimation = CAKeyframeAnimation(keyPath: "transform.rotation.z")
		discRotationAnimation.duration = 0.500
		discRotationAnimation.values = [0.000, 6.326] as [Float]
		discRotationAnimation.keyTimes = [0.000, 1.000] as [NSNumber]
		discRotationAnimation.timingFunctions = [linearTiming]
		discRotationAnimation.repeatCount = HUGE
		discRotationAnimation.beginTime = beginTime
		discRotationAnimation.fillMode = fillMode
		discRotationAnimation.isRemovedOnCompletion = removedOnCompletion
		self.viewsByName["disc__root"]?.layer.add(discRotationAnimation, forKey:"spin_Rotation")
	}

	func removeSpinAnimation() {
		self.viewsByName["disc__root"]?.layer.removeAnimation(forKey: "spin_Rotation")
	}

	// MARK: CAAnimationDelegate
	func animationDidStop(_ anim: CAAnimation, finished flag: Bool) {
		if let completion = self.animationCompletions[anim] {
			self.animationCompletions.removeValue(forKey: anim)
			completion(flag)
		}
	}

	func removeAllAnimations() {
		for subview in viewsByName.values {
			subview.layer.removeAllAnimations()
		}
		self.layer.removeAnimation(forKey: "Fade")
	}
}
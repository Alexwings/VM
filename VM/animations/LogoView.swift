//
// LogoView.swift
// Generated by Core Animator version 1.3.2 on 1/22/17.
//
// DO NOT MODIFY THIS FILE. IT IS AUTO-GENERATED AND WILL BE OVERWRITTEN
//

import UIKit

private class LogoPassthroughView: UIView {
    override func point(inside point: CGPoint, with event: UIEvent?) -> Bool {
        for subview in subviews as [UIView] {
            if subview.point(inside: convert(point, to: subview), with: event) { return true }
        }
        return false
    }
}

@IBDesignable
class LogoView : UIView, CAAnimationDelegate {


	var animationCompletions = Dictionary<CAAnimation, (Bool) -> Void>()
	var viewsByName: [String : UIView]!

	// - MARK: Life Cycle

	convenience init() {
		self.init(frame: CGRect(x: 0, y: 0, width: 1136, height: 768))
	}

	override init(frame: CGRect) {
		super.init(frame: frame)
		self.setupHierarchy()
	}

	required init?(coder aDecoder: NSCoder) {
		super.init(coder: aDecoder)
		self.setupHierarchy()
	}

	// - MARK: Scaling

	override func layoutSubviews() {
		super.layoutSubviews()

		if let scalingView = self.viewsByName["__scaling__"] {
			var xScale = self.bounds.size.width / scalingView.bounds.size.width
			var yScale = self.bounds.size.height / scalingView.bounds.size.height
			switch contentMode {
			case .scaleToFill:
				break
			case .scaleAspectFill:
				let scale = max(xScale, yScale)
				xScale = scale
				yScale = scale
			default:
				let scale = min(xScale, yScale)
				xScale = scale
				yScale = scale
			}
			scalingView.transform = CGAffineTransform(scaleX: xScale, y: yScale)
			scalingView.center = CGPoint(x:self.bounds.midX, y:self.bounds.midY)
		}
	}

	// - MARK: Setup

	func setupHierarchy() {
		var viewsByName: [String : UIView] = [:]
		let bundle = Bundle(for:type(of: self))
		let __scaling__ = UIView()
		__scaling__.bounds = CGRect(x:0, y:0, width:1136, height:768)
		__scaling__.center = CGPoint(x:568.0, y:384.0)
		self.addSubview(__scaling__)
		viewsByName["__scaling__"] = __scaling__

		let logo__root = LogoPassthroughView()
		let logo__xScale = LogoPassthroughView()
		let logo__yScale = LogoPassthroughView()
		let logo = UIView()
		logo.layer.anchorPoint = CGPoint(x:-0.210, y:1.374)
		logo.bounds = CGRect(x:0, y:0, width:96.1, height:51.5)
		logo__root.layer.position = CGPoint(x:576.484, y:353.609)
		logo__xScale.transform = CGAffineTransform(scaleX: 1.84, y: 1.00)
		logo__yScale.transform = CGAffineTransform(scaleX: 1.00, y: 1.85)
		logo__root.transform = CGAffineTransform(rotationAngle: 0.000)
		__scaling__.addSubview(logo__root)
		logo__root.addSubview(logo__xScale)
		logo__xScale.addSubview(logo__yScale)
		logo__yScale.addSubview(logo)
		__scaling__.addSubview(logo__root)
		viewsByName["logo__root"] = logo__root
		viewsByName["logo__xScale"] = logo__xScale
		viewsByName["logo__yScale"] = logo__yScale
		viewsByName["logo"] = logo

		let logoM__root = LogoPassthroughView()
		let logoM__xScale = LogoPassthroughView()
		let logoM__yScale = LogoPassthroughView()
		let logoM = UIView()
		logoM.bounds = CGRect(x:0, y:0, width:120.0, height:120.0)
		logoM__root.layer.position = CGPoint(x:48.053, y:75.865)
		logoM__xScale.transform = CGAffineTransform(scaleX: 1.00, y: 1.00)
		logoM__yScale.transform = CGAffineTransform(scaleX: 1.00, y: 1.00)
		logoM__root.transform = CGAffineTransform(rotationAngle: 0.000)
		logo.addSubview(logoM__root)
		logoM__root.addSubview(logoM__xScale)
		logoM__xScale.addSubview(logoM__yScale)
		logoM__yScale.addSubview(logoM)
		logo.addSubview(logoM__root)
		viewsByName["logoM__root"] = logoM__root
		viewsByName["logoM__xScale"] = logoM__xScale
		viewsByName["logoM__yScale"] = logoM__yScale
		viewsByName["logoM"] = logoM

		let logoMred__root = LogoPassthroughView()
		let logoMred__xScale = LogoPassthroughView()
		let logoMred__yScale = LogoPassthroughView()
		let logoMred = UIImageView()
		let imgLogoMred = UIImage(named:"LogoMred.png", in: bundle, compatibleWith: nil)
		if imgLogoMred == nil {
			print("** Warning: Could not create image from 'LogoMred.png'")
		}
		logoMred.image = imgLogoMred
		logoMred.contentMode = .center
		logoMred.bounds = CGRect(x:0, y:0, width:120.0, height:120.0)
		logoMred__root.layer.position = CGPoint(x:60.000, y:60.000)
		logoMred__xScale.transform = CGAffineTransform(scaleX: 1.00, y: 1.00)
		logoMred__yScale.transform = CGAffineTransform(scaleX: 1.00, y: 1.00)
		logoMred__root.transform = CGAffineTransform(rotationAngle: 0.000)
		logoM.addSubview(logoMred__root)
		logoMred__root.addSubview(logoMred__xScale)
		logoMred__xScale.addSubview(logoMred__yScale)
		logoMred__yScale.addSubview(logoMred)
		logoM.addSubview(logoMred__root)
		viewsByName["LogoMred__root"] = logoMred__root
		viewsByName["LogoMred__xScale"] = logoMred__xScale
		viewsByName["LogoMred__yScale"] = logoMred__yScale
		viewsByName["LogoMred"] = logoMred

		let logoMgreen__root = LogoPassthroughView()
		let logoMgreen__xScale = LogoPassthroughView()
		let logoMgreen__yScale = LogoPassthroughView()
		let logoMgreen = UIImageView()
		let imgLogoMgreen = UIImage(named:"LogoMgreen.png", in: bundle, compatibleWith: nil)
		if imgLogoMgreen == nil {
			print("** Warning: Could not create image from 'LogoMgreen.png'")
		}
		logoMgreen.image = imgLogoMgreen
		logoMgreen.contentMode = .center
		logoMgreen.bounds = CGRect(x:0, y:0, width:120.0, height:120.0)
		logoMgreen__root.layer.position = CGPoint(x:60.000, y:60.000)
		logoMgreen__xScale.transform = CGAffineTransform(scaleX: 1.00, y: 1.00)
		logoMgreen__yScale.transform = CGAffineTransform(scaleX: 1.00, y: 1.00)
		logoMgreen__root.transform = CGAffineTransform(rotationAngle: 0.000)
		logoM.addSubview(logoMgreen__root)
		logoMgreen__root.addSubview(logoMgreen__xScale)
		logoMgreen__xScale.addSubview(logoMgreen__yScale)
		logoMgreen__yScale.addSubview(logoMgreen)
		logoM.addSubview(logoMgreen__root)
		viewsByName["LogoMgreen__root"] = logoMgreen__root
		viewsByName["LogoMgreen__xScale"] = logoMgreen__xScale
		viewsByName["LogoMgreen__yScale"] = logoMgreen__yScale
		viewsByName["LogoMgreen"] = logoMgreen

		let logoM2__root = LogoPassthroughView()
		let logoM2__xScale = LogoPassthroughView()
		let logoM2__yScale = LogoPassthroughView()
		let logoM2 = UIImageView()
		let imgLogoM = UIImage(named:"LogoM.png", in: bundle, compatibleWith: nil)
		if imgLogoM == nil {
			print("** Warning: Could not create image from 'LogoM.png'")
		}
		logoM2.image = imgLogoM
		logoM2.contentMode = .center
		logoM2.bounds = CGRect(x:0, y:0, width:120.0, height:120.0)
		logoM2__root.layer.position = CGPoint(x:60.000, y:60.000)
		logoM2__xScale.transform = CGAffineTransform(scaleX: 1.00, y: 1.00)
		logoM2__yScale.transform = CGAffineTransform(scaleX: 1.00, y: 1.00)
		logoM2__root.transform = CGAffineTransform(rotationAngle: 0.000)
		logoM.addSubview(logoM2__root)
		logoM2__root.addSubview(logoM2__xScale)
		logoM2__xScale.addSubview(logoM2__yScale)
		logoM2__yScale.addSubview(logoM2)
		logoM.addSubview(logoM2__root)
		viewsByName["LogoM__root"] = logoM2__root
		viewsByName["LogoM__xScale"] = logoM2__xScale
		viewsByName["LogoM__yScale"] = logoM2__yScale
		viewsByName["LogoM"] = logoM2

		let logoV__root = LogoPassthroughView()
		let logoV__xScale = LogoPassthroughView()
		let logoV__yScale = LogoPassthroughView()
		let logoV = UIView()
		logoV.bounds = CGRect(x:0, y:0, width:120.0, height:120.0)
		logoV__root.layer.position = CGPoint(x:-85.853, y:75.865)
		logoV__xScale.transform = CGAffineTransform(scaleX: 1.00, y: 1.00)
		logoV__yScale.transform = CGAffineTransform(scaleX: 1.00, y: 1.00)
		logoV__root.transform = CGAffineTransform(rotationAngle: 0.000)
		logo.addSubview(logoV__root)
		logoV__root.addSubview(logoV__xScale)
		logoV__xScale.addSubview(logoV__yScale)
		logoV__yScale.addSubview(logoV)
		logo.addSubview(logoV__root)
		viewsByName["logoV__root"] = logoV__root
		viewsByName["logoV__xScale"] = logoV__xScale
		viewsByName["logoV__yScale"] = logoV__yScale
		viewsByName["logoV"] = logoV

		let logoVgreen__root = LogoPassthroughView()
		let logoVgreen__xScale = LogoPassthroughView()
		let logoVgreen__yScale = LogoPassthroughView()
		let logoVgreen = UIImageView()
		let imgLogoVgreen = UIImage(named:"LogoVgreen.png", in: bundle, compatibleWith: nil)
		if imgLogoVgreen == nil {
			print("** Warning: Could not create image from 'LogoVgreen.png'")
		}
		logoVgreen.image = imgLogoVgreen
		logoVgreen.contentMode = .center
		logoVgreen.bounds = CGRect(x:0, y:0, width:120.0, height:120.0)
		logoVgreen__root.layer.position = CGPoint(x:59.852, y:60.000)
		logoVgreen__xScale.transform = CGAffineTransform(scaleX: 1.00, y: 1.00)
		logoVgreen__yScale.transform = CGAffineTransform(scaleX: 1.00, y: 1.00)
		logoVgreen__root.transform = CGAffineTransform(rotationAngle: 0.000)
		logoV.addSubview(logoVgreen__root)
		logoVgreen__root.addSubview(logoVgreen__xScale)
		logoVgreen__xScale.addSubview(logoVgreen__yScale)
		logoVgreen__yScale.addSubview(logoVgreen)
		logoV.addSubview(logoVgreen__root)
		viewsByName["LogoVgreen__root"] = logoVgreen__root
		viewsByName["LogoVgreen__xScale"] = logoVgreen__xScale
		viewsByName["LogoVgreen__yScale"] = logoVgreen__yScale
		viewsByName["LogoVgreen"] = logoVgreen

		let logoVred__root = LogoPassthroughView()
		let logoVred__xScale = LogoPassthroughView()
		let logoVred__yScale = LogoPassthroughView()
		let logoVred = UIImageView()
		let imgLogoVred = UIImage(named:"LogoVred.png", in: bundle, compatibleWith: nil)
		if imgLogoVred == nil {
			print("** Warning: Could not create image from 'LogoVred.png'")
		}
		logoVred.image = imgLogoVred
		logoVred.contentMode = .center
		logoVred.bounds = CGRect(x:0, y:0, width:120.0, height:120.0)
		logoVred__root.layer.position = CGPoint(x:60.000, y:60.000)
		logoVred__xScale.transform = CGAffineTransform(scaleX: 1.00, y: 1.00)
		logoVred__yScale.transform = CGAffineTransform(scaleX: 1.00, y: 1.00)
		logoVred__root.transform = CGAffineTransform(rotationAngle: 0.000)
		logoV.addSubview(logoVred__root)
		logoVred__root.addSubview(logoVred__xScale)
		logoVred__xScale.addSubview(logoVred__yScale)
		logoVred__yScale.addSubview(logoVred)
		logoV.addSubview(logoVred__root)
		viewsByName["LogoVred__root"] = logoVred__root
		viewsByName["LogoVred__xScale"] = logoVred__xScale
		viewsByName["LogoVred__yScale"] = logoVred__yScale
		viewsByName["LogoVred"] = logoVred

		let logoV2__root = LogoPassthroughView()
		let logoV2__xScale = LogoPassthroughView()
		let logoV2__yScale = LogoPassthroughView()
		let logoV2 = UIImageView()
		let imgLogoV = UIImage(named:"LogoV.png", in: bundle, compatibleWith: nil)
		if imgLogoV == nil {
			print("** Warning: Could not create image from 'LogoV.png'")
		}
		logoV2.image = imgLogoV
		logoV2.contentMode = .center
		logoV2.bounds = CGRect(x:0, y:0, width:120.0, height:120.0)
		logoV2__root.layer.position = CGPoint(x:59.625, y:60.000)
		logoV2__xScale.transform = CGAffineTransform(scaleX: 1.00, y: 1.00)
		logoV2__yScale.transform = CGAffineTransform(scaleX: 1.00, y: 1.00)
		logoV2__root.transform = CGAffineTransform(rotationAngle: 0.000)
		logoV.addSubview(logoV2__root)
		logoV2__root.addSubview(logoV2__xScale)
		logoV2__xScale.addSubview(logoV2__yScale)
		logoV2__yScale.addSubview(logoV2)
		logoV.addSubview(logoV2__root)
		viewsByName["LogoV__root"] = logoV2__root
		viewsByName["LogoV__xScale"] = logoV2__xScale
		viewsByName["LogoV__yScale"] = logoV2__yScale
		viewsByName["LogoV"] = logoV2

		self.viewsByName = viewsByName
	}

	// - MARK: disappear

	func addDisappearAnimation() {
		addDisappearAnimation(beginTime: 0, fillMode: kCAFillModeBoth, removedOnCompletion: false, completion: nil)
	}

	func addDisappearAnimation(completion: ((Bool) -> Void)?) {
		addDisappearAnimation(beginTime: 0, fillMode: kCAFillModeBoth, removedOnCompletion: false, completion: completion)
	}

	func addDisappearAnimation(removedOnCompletion: Bool) {
		addDisappearAnimation(beginTime: 0, fillMode: removedOnCompletion ? kCAFillModeRemoved : kCAFillModeBoth, removedOnCompletion: removedOnCompletion, completion: nil)
	}

	func addDisappearAnimation(removedOnCompletion: Bool, completion: ((Bool) -> Void)?) {
		addDisappearAnimation(beginTime: 0, fillMode: removedOnCompletion ? kCAFillModeRemoved : kCAFillModeBoth, removedOnCompletion: removedOnCompletion, completion: completion)
	}

	func addDisappearAnimation(beginTime: CFTimeInterval, fillMode: String, removedOnCompletion: Bool, completion: ((Bool) -> Void)?) {
		let anticOverTiming = CAMediaTimingFunction(controlPoints: 0.42, -0.30, 0.58, 1.30)
		if let complete = completion {
			let representativeAnimation = CABasicAnimation(keyPath: "not.a.real.key")
			representativeAnimation.duration = 1.000
			representativeAnimation.delegate = self
			self.layer.add(representativeAnimation, forKey: "Disappear")
			self.animationCompletions[layer.animation(forKey: "Disappear")!] = complete
		}

		let logoOpacityAnimation = CAKeyframeAnimation(keyPath: "opacity")
		logoOpacityAnimation.duration = 1.000
		logoOpacityAnimation.values = [1.000, 0.000] as [Float]
		logoOpacityAnimation.keyTimes = [0.000, 1.000] as [NSNumber]
		logoOpacityAnimation.timingFunctions = [anticOverTiming]
		logoOpacityAnimation.beginTime = beginTime
		logoOpacityAnimation.fillMode = fillMode
		logoOpacityAnimation.isRemovedOnCompletion = removedOnCompletion
		self.viewsByName["logo__root"]?.layer.add(logoOpacityAnimation, forKey:"disappear_Opacity")

		let logoScaleXAnimation = CAKeyframeAnimation(keyPath: "transform.scale.x")
		logoScaleXAnimation.duration = 1.000
		logoScaleXAnimation.values = [1.839, 8.000] as [Float]
		logoScaleXAnimation.keyTimes = [0.000, 1.000] as [NSNumber]
		logoScaleXAnimation.timingFunctions = [anticOverTiming]
		logoScaleXAnimation.beginTime = beginTime
		logoScaleXAnimation.fillMode = fillMode
		logoScaleXAnimation.isRemovedOnCompletion = removedOnCompletion
		self.viewsByName["logo__xScale"]?.layer.add(logoScaleXAnimation, forKey:"disappear_ScaleX")

		let logoScaleYAnimation = CAKeyframeAnimation(keyPath: "transform.scale.y")
		logoScaleYAnimation.duration = 1.000
		logoScaleYAnimation.values = [1.845, 8.000] as [Float]
		logoScaleYAnimation.keyTimes = [0.000, 1.000] as [NSNumber]
		logoScaleYAnimation.timingFunctions = [anticOverTiming]
		logoScaleYAnimation.beginTime = beginTime
		logoScaleYAnimation.fillMode = fillMode
		logoScaleYAnimation.isRemovedOnCompletion = removedOnCompletion
		self.viewsByName["logo__yScale"]?.layer.add(logoScaleYAnimation, forKey:"disappear_ScaleY")
	}

	func removeDisappearAnimation() {
		self.layer.removeAnimation(forKey: "Disappear")
		self.viewsByName["logo__root"]?.layer.removeAnimation(forKey: "disappear_Opacity")
		self.viewsByName["logo__xScale"]?.layer.removeAnimation(forKey: "disappear_ScaleX")
		self.viewsByName["logo__yScale"]?.layer.removeAnimation(forKey: "disappear_ScaleY")
	}

	// - MARK: mBump

	func addMBumpAnimation() {
		addMBumpAnimation(beginTime: 0, fillMode: kCAFillModeBoth, removedOnCompletion: false, completion: nil)
	}

	func addMBumpAnimation(completion: ((Bool) -> Void)?) {
		addMBumpAnimation(beginTime: 0, fillMode: kCAFillModeBoth, removedOnCompletion: false, completion: completion)
	}

	func addMBumpAnimation(removedOnCompletion: Bool) {
		addMBumpAnimation(beginTime: 0, fillMode: removedOnCompletion ? kCAFillModeRemoved : kCAFillModeBoth, removedOnCompletion: removedOnCompletion, completion: nil)
	}

	func addMBumpAnimation(removedOnCompletion: Bool, completion: ((Bool) -> Void)?) {
		addMBumpAnimation(beginTime: 0, fillMode: removedOnCompletion ? kCAFillModeRemoved : kCAFillModeBoth, removedOnCompletion: removedOnCompletion, completion: completion)
	}

	func addMBumpAnimation(beginTime: CFTimeInterval, fillMode: String, removedOnCompletion: Bool, completion: ((Bool) -> Void)?) {
		let linearTiming = CAMediaTimingFunction(name: kCAMediaTimingFunctionLinear)
		let anticOverTiming = CAMediaTimingFunction(controlPoints: 0.42, -0.30, 0.58, 1.30)
		let easeOutTiming = CAMediaTimingFunction(name: kCAMediaTimingFunctionEaseOut)
		let easeInTiming = CAMediaTimingFunction(name: kCAMediaTimingFunctionEaseIn)
		if let complete = completion {
			let representativeAnimation = CABasicAnimation(keyPath: "not.a.real.key")
			representativeAnimation.duration = 0.600
			representativeAnimation.delegate = self
			self.layer.add(representativeAnimation, forKey: "MBump")
			self.animationCompletions[layer.animation(forKey: "MBump")!] = complete
		}

		let logoM2ScaleXAnimation = CAKeyframeAnimation(keyPath: "transform.scale.x")
		logoM2ScaleXAnimation.duration = 0.600
		logoM2ScaleXAnimation.values = [1.000, 3.000, 0.800, 1.000, 1.000] as [Float]
		logoM2ScaleXAnimation.keyTimes = [0.000, 0.625, 0.750, 0.833, 1.000] as [NSNumber]
		logoM2ScaleXAnimation.timingFunctions = [anticOverTiming, easeInTiming, easeOutTiming, linearTiming]
		logoM2ScaleXAnimation.beginTime = beginTime
		logoM2ScaleXAnimation.fillMode = fillMode
		logoM2ScaleXAnimation.isRemovedOnCompletion = removedOnCompletion
		self.viewsByName["LogoM__xScale"]?.layer.add(logoM2ScaleXAnimation, forKey:"mBump_ScaleX")

		let logoM2ScaleYAnimation = CAKeyframeAnimation(keyPath: "transform.scale.y")
		logoM2ScaleYAnimation.duration = 0.600
		logoM2ScaleYAnimation.values = [1.000, 3.000, 0.800, 1.000, 1.000] as [Float]
		logoM2ScaleYAnimation.keyTimes = [0.000, 0.625, 0.750, 0.833, 1.000] as [NSNumber]
		logoM2ScaleYAnimation.timingFunctions = [anticOverTiming, easeInTiming, easeOutTiming, linearTiming]
		logoM2ScaleYAnimation.beginTime = beginTime
		logoM2ScaleYAnimation.fillMode = fillMode
		logoM2ScaleYAnimation.isRemovedOnCompletion = removedOnCompletion
		self.viewsByName["LogoM__yScale"]?.layer.add(logoM2ScaleYAnimation, forKey:"mBump_ScaleY")

		let logoMgreenScaleXAnimation = CAKeyframeAnimation(keyPath: "transform.scale.x")
		logoMgreenScaleXAnimation.duration = 0.600
		logoMgreenScaleXAnimation.values = [1.000, 1.000, 3.000, 0.800, 1.000, 1.000] as [Float]
		logoMgreenScaleXAnimation.keyTimes = [0.000, 0.083, 0.708, 0.833, 0.917, 1.000] as [NSNumber]
		logoMgreenScaleXAnimation.timingFunctions = [anticOverTiming, anticOverTiming, easeInTiming, easeOutTiming, linearTiming]
		logoMgreenScaleXAnimation.beginTime = beginTime
		logoMgreenScaleXAnimation.fillMode = fillMode
		logoMgreenScaleXAnimation.isRemovedOnCompletion = removedOnCompletion
		self.viewsByName["LogoMgreen__xScale"]?.layer.add(logoMgreenScaleXAnimation, forKey:"mBump_ScaleX")

		let logoMgreenScaleYAnimation = CAKeyframeAnimation(keyPath: "transform.scale.y")
		logoMgreenScaleYAnimation.duration = 0.600
		logoMgreenScaleYAnimation.values = [1.000, 1.000, 3.000, 0.800, 1.000, 1.000] as [Float]
		logoMgreenScaleYAnimation.keyTimes = [0.000, 0.083, 0.708, 0.833, 0.917, 1.000] as [NSNumber]
		logoMgreenScaleYAnimation.timingFunctions = [anticOverTiming, anticOverTiming, easeInTiming, easeOutTiming, linearTiming]
		logoMgreenScaleYAnimation.beginTime = beginTime
		logoMgreenScaleYAnimation.fillMode = fillMode
		logoMgreenScaleYAnimation.isRemovedOnCompletion = removedOnCompletion
		self.viewsByName["LogoMgreen__yScale"]?.layer.add(logoMgreenScaleYAnimation, forKey:"mBump_ScaleY")

		let logoMredScaleXAnimation = CAKeyframeAnimation(keyPath: "transform.scale.x")
		logoMredScaleXAnimation.duration = 0.600
		logoMredScaleXAnimation.values = [1.000, 1.000, 3.000, 0.800, 1.000] as [Float]
		logoMredScaleXAnimation.keyTimes = [0.000, 0.167, 0.792, 0.917, 1.000] as [NSNumber]
		logoMredScaleXAnimation.timingFunctions = [anticOverTiming, anticOverTiming, easeInTiming, easeOutTiming]
		logoMredScaleXAnimation.beginTime = beginTime
		logoMredScaleXAnimation.fillMode = fillMode
		logoMredScaleXAnimation.isRemovedOnCompletion = removedOnCompletion
		self.viewsByName["LogoMred__xScale"]?.layer.add(logoMredScaleXAnimation, forKey:"mBump_ScaleX")

		let logoMredScaleYAnimation = CAKeyframeAnimation(keyPath: "transform.scale.y")
		logoMredScaleYAnimation.duration = 0.600
		logoMredScaleYAnimation.values = [1.000, 1.000, 3.000, 0.800, 1.000] as [Float]
		logoMredScaleYAnimation.keyTimes = [0.000, 0.167, 0.792, 0.917, 1.000] as [NSNumber]
		logoMredScaleYAnimation.timingFunctions = [anticOverTiming, anticOverTiming, easeInTiming, easeOutTiming]
		logoMredScaleYAnimation.beginTime = beginTime
		logoMredScaleYAnimation.fillMode = fillMode
		logoMredScaleYAnimation.isRemovedOnCompletion = removedOnCompletion
		self.viewsByName["LogoMred__yScale"]?.layer.add(logoMredScaleYAnimation, forKey:"mBump_ScaleY")
	}

	func removeMBumpAnimation() {
		self.layer.removeAnimation(forKey: "MBump")
		self.viewsByName["LogoM__xScale"]?.layer.removeAnimation(forKey: "mBump_ScaleX")
		self.viewsByName["LogoM__yScale"]?.layer.removeAnimation(forKey: "mBump_ScaleY")
		self.viewsByName["LogoMgreen__xScale"]?.layer.removeAnimation(forKey: "mBump_ScaleX")
		self.viewsByName["LogoMgreen__yScale"]?.layer.removeAnimation(forKey: "mBump_ScaleY")
		self.viewsByName["LogoMred__xScale"]?.layer.removeAnimation(forKey: "mBump_ScaleX")
		self.viewsByName["LogoMred__yScale"]?.layer.removeAnimation(forKey: "mBump_ScaleY")
	}

	// - MARK: vBump

	func addVBumpAnimation() {
		addVBumpAnimation(beginTime: 0, fillMode: kCAFillModeBoth, removedOnCompletion: false, completion: nil)
	}

	func addVBumpAnimation(completion: ((Bool) -> Void)?) {
		addVBumpAnimation(beginTime: 0, fillMode: kCAFillModeBoth, removedOnCompletion: false, completion: completion)
	}

	func addVBumpAnimation(removedOnCompletion: Bool) {
		addVBumpAnimation(beginTime: 0, fillMode: removedOnCompletion ? kCAFillModeRemoved : kCAFillModeBoth, removedOnCompletion: removedOnCompletion, completion: nil)
	}

	func addVBumpAnimation(removedOnCompletion: Bool, completion: ((Bool) -> Void)?) {
		addVBumpAnimation(beginTime: 0, fillMode: removedOnCompletion ? kCAFillModeRemoved : kCAFillModeBoth, removedOnCompletion: removedOnCompletion, completion: completion)
	}

	func addVBumpAnimation(beginTime: CFTimeInterval, fillMode: String, removedOnCompletion: Bool, completion: ((Bool) -> Void)?) {
		let linearTiming = CAMediaTimingFunction(name: kCAMediaTimingFunctionLinear)
		let anticOverTiming = CAMediaTimingFunction(controlPoints: 0.42, -0.30, 0.58, 1.30)
		let easeOutTiming = CAMediaTimingFunction(name: kCAMediaTimingFunctionEaseOut)
		let easeInTiming = CAMediaTimingFunction(name: kCAMediaTimingFunctionEaseIn)
		if let complete = completion {
			let representativeAnimation = CABasicAnimation(keyPath: "not.a.real.key")
			representativeAnimation.duration = 0.600
			representativeAnimation.delegate = self
			self.layer.add(representativeAnimation, forKey: "VBump")
			self.animationCompletions[layer.animation(forKey: "VBump")!] = complete
		}

		let logoVgreenScaleXAnimation = CAKeyframeAnimation(keyPath: "transform.scale.x")
		logoVgreenScaleXAnimation.duration = 0.600
		logoVgreenScaleXAnimation.values = [1.000, 1.000, 3.000, 0.800, 1.000] as [Float]
		logoVgreenScaleXAnimation.keyTimes = [0.000, 0.167, 0.792, 0.917, 1.000] as [NSNumber]
		logoVgreenScaleXAnimation.timingFunctions = [anticOverTiming, anticOverTiming, easeInTiming, easeOutTiming]
		logoVgreenScaleXAnimation.beginTime = beginTime
		logoVgreenScaleXAnimation.fillMode = fillMode
		logoVgreenScaleXAnimation.isRemovedOnCompletion = removedOnCompletion
		self.viewsByName["LogoVgreen__xScale"]?.layer.add(logoVgreenScaleXAnimation, forKey:"vBump_ScaleX")

		let logoVgreenScaleYAnimation = CAKeyframeAnimation(keyPath: "transform.scale.y")
		logoVgreenScaleYAnimation.duration = 0.600
		logoVgreenScaleYAnimation.values = [1.000, 1.000, 3.000, 0.800, 1.000] as [Float]
		logoVgreenScaleYAnimation.keyTimes = [0.000, 0.167, 0.792, 0.917, 1.000] as [NSNumber]
		logoVgreenScaleYAnimation.timingFunctions = [anticOverTiming, anticOverTiming, easeInTiming, easeOutTiming]
		logoVgreenScaleYAnimation.beginTime = beginTime
		logoVgreenScaleYAnimation.fillMode = fillMode
		logoVgreenScaleYAnimation.isRemovedOnCompletion = removedOnCompletion
		self.viewsByName["LogoVgreen__yScale"]?.layer.add(logoVgreenScaleYAnimation, forKey:"vBump_ScaleY")

		let logoVredScaleXAnimation = CAKeyframeAnimation(keyPath: "transform.scale.x")
		logoVredScaleXAnimation.duration = 0.600
		logoVredScaleXAnimation.values = [1.000, 1.000, 3.000, 0.800, 1.000, 1.000] as [Float]
		logoVredScaleXAnimation.keyTimes = [0.000, 0.083, 0.708, 0.833, 0.917, 1.000] as [NSNumber]
		logoVredScaleXAnimation.timingFunctions = [anticOverTiming, anticOverTiming, easeInTiming, easeOutTiming, linearTiming]
		logoVredScaleXAnimation.beginTime = beginTime
		logoVredScaleXAnimation.fillMode = fillMode
		logoVredScaleXAnimation.isRemovedOnCompletion = removedOnCompletion
		self.viewsByName["LogoVred__xScale"]?.layer.add(logoVredScaleXAnimation, forKey:"vBump_ScaleX")

		let logoVredScaleYAnimation = CAKeyframeAnimation(keyPath: "transform.scale.y")
		logoVredScaleYAnimation.duration = 0.600
		logoVredScaleYAnimation.values = [1.000, 1.000, 3.000, 0.800, 1.000, 1.000] as [Float]
		logoVredScaleYAnimation.keyTimes = [0.000, 0.083, 0.708, 0.833, 0.917, 1.000] as [NSNumber]
		logoVredScaleYAnimation.timingFunctions = [anticOverTiming, anticOverTiming, easeInTiming, easeOutTiming, linearTiming]
		logoVredScaleYAnimation.beginTime = beginTime
		logoVredScaleYAnimation.fillMode = fillMode
		logoVredScaleYAnimation.isRemovedOnCompletion = removedOnCompletion
		self.viewsByName["LogoVred__yScale"]?.layer.add(logoVredScaleYAnimation, forKey:"vBump_ScaleY")

		let logoV2ScaleXAnimation = CAKeyframeAnimation(keyPath: "transform.scale.x")
		logoV2ScaleXAnimation.duration = 0.600
		logoV2ScaleXAnimation.values = [1.000, 3.000, 0.800, 1.000, 1.000] as [Float]
		logoV2ScaleXAnimation.keyTimes = [0.000, 0.625, 0.750, 0.833, 1.000] as [NSNumber]
		logoV2ScaleXAnimation.timingFunctions = [anticOverTiming, easeInTiming, easeOutTiming, linearTiming]
		logoV2ScaleXAnimation.beginTime = beginTime
		logoV2ScaleXAnimation.fillMode = fillMode
		logoV2ScaleXAnimation.isRemovedOnCompletion = removedOnCompletion
		self.viewsByName["LogoV__xScale"]?.layer.add(logoV2ScaleXAnimation, forKey:"vBump_ScaleX")

		let logoV2ScaleYAnimation = CAKeyframeAnimation(keyPath: "transform.scale.y")
		logoV2ScaleYAnimation.duration = 0.600
		logoV2ScaleYAnimation.values = [1.000, 3.000, 0.800, 1.000, 1.000] as [Float]
		logoV2ScaleYAnimation.keyTimes = [0.000, 0.625, 0.750, 0.833, 1.000] as [NSNumber]
		logoV2ScaleYAnimation.timingFunctions = [anticOverTiming, easeInTiming, easeOutTiming, linearTiming]
		logoV2ScaleYAnimation.beginTime = beginTime
		logoV2ScaleYAnimation.fillMode = fillMode
		logoV2ScaleYAnimation.isRemovedOnCompletion = removedOnCompletion
		self.viewsByName["LogoV__yScale"]?.layer.add(logoV2ScaleYAnimation, forKey:"vBump_ScaleY")
	}

	func removeVBumpAnimation() {
		self.layer.removeAnimation(forKey: "VBump")
		self.viewsByName["LogoVgreen__xScale"]?.layer.removeAnimation(forKey: "vBump_ScaleX")
		self.viewsByName["LogoVgreen__yScale"]?.layer.removeAnimation(forKey: "vBump_ScaleY")
		self.viewsByName["LogoVred__xScale"]?.layer.removeAnimation(forKey: "vBump_ScaleX")
		self.viewsByName["LogoVred__yScale"]?.layer.removeAnimation(forKey: "vBump_ScaleY")
		self.viewsByName["LogoV__xScale"]?.layer.removeAnimation(forKey: "vBump_ScaleX")
		self.viewsByName["LogoV__yScale"]?.layer.removeAnimation(forKey: "vBump_ScaleY")
	}

	// MARK: CAAnimationDelegate
	func animationDidStop(_ anim: CAAnimation, finished flag: Bool) {
		if let completion = self.animationCompletions[anim] {
			self.animationCompletions.removeValue(forKey: anim)
			completion(flag)
		}
	}

	func removeAllAnimations() {
		for subview in viewsByName.values {
			subview.layer.removeAllAnimations()
		}
		self.layer.removeAnimation(forKey: "MBump")
		self.layer.removeAnimation(forKey: "VBump")
		self.layer.removeAnimation(forKey: "Disappear")
	}
}